{"ast":null,"code":"var _jsxFileName = \"/Users/shreyasudhanva/Documents/Projects/MemoryGame/memory-game/src/App.jsx\",\n  _s = $RefreshSig$();\n// App.jsx\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emojiList = ['🍕', '🌈', '🐶', '🐱', '🎈', '🚀', '🎵', '🍩'];\nfunction shuffleArray(array) {\n  const duplicated = [...array, ...array];\n  return duplicated.sort(() => Math.random() - 0.5).map((emoji, index) => ({\n    id: index,\n    emoji,\n    isFlipped: false,\n    isMatched: false\n  }));\n}\nexport default function App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [secondCard, setSecondCard] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [moves, setMoves] = useState(0);\n  useEffect(() => {\n    setCards(shuffleArray(emojiList));\n  }, []);\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      setDisabled(true);\n      if (firstCard.emoji === secondCard.emoji) {\n        setCards(prev => prev.map(card => card.emoji === firstCard.emoji ? {\n          ...card,\n          isMatched: true\n        } : card));\n        resetTurn();\n      } else {\n        setTimeout(() => {\n          setCards(prev => prev.map(card => card.id === firstCard.id || card.id === secondCard.id ? {\n            ...card,\n            isFlipped: false\n          } : card));\n          resetTurn();\n        }, 1000);\n      }\n      setMoves(m => m + 1);\n    }\n  }, [firstCard, secondCard]);\n  const handleCardClick = card => {\n    if (!disabled && !card.isFlipped && !card.isMatched) {\n      setCards(prev => prev.map(c => c.id === card.id ? {\n        ...c,\n        isFlipped: true\n      } : c));\n      if (!firstCard) {\n        setFirstCard(card);\n      } else {\n        setSecondCard(card);\n      }\n    }\n  };\n  const resetTurn = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n  const resetGame = () => {\n    setCards(shuffleArray(emojiList));\n    setMoves(0);\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center justify-center bg-gray-10 p-4 w-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-4\",\n      children: \"\\uD83E\\uDDE0 Memory Match Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-2\",\n      children: [\"Moves: \", moves]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center w-full\",\n      children: /*#__PURE__*/_jsxDEV(GameBoard, {\n        cards: cards,\n        onCardClick: handleCardClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yFKCCtAH+2dOhanqJFEPWDY3Zwg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","jsxDEV","_jsxDEV","emojiList","shuffleArray","array","duplicated","sort","Math","random","map","emoji","index","id","isFlipped","isMatched","App","_s","cards","setCards","firstCard","setFirstCard","secondCard","setSecondCard","disabled","setDisabled","moves","setMoves","prev","card","resetTurn","setTimeout","m","handleCardClick","c","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","onClick","_c","$RefreshReg$"],"sources":["/Users/shreyasudhanva/Documents/Projects/MemoryGame/memory-game/src/App.jsx"],"sourcesContent":["// App.jsx\nimport React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\n\nconst emojiList = ['🍕','🌈','🐶','🐱','🎈','🚀','🎵','🍩'];\n\nfunction shuffleArray(array) {\n  const duplicated = [...array, ...array];\n  return duplicated.sort(() => Math.random() - 0.5).map((emoji, index) => ({\n    id: index,\n    emoji,\n    isFlipped: false,\n    isMatched: false\n  }));\n}\n\nexport default function App() {\n  const [cards, setCards] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [secondCard, setSecondCard] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [moves, setMoves] = useState(0);\n\n  useEffect(() => {\n    setCards(shuffleArray(emojiList));\n  }, []);\n\n  useEffect(() => {\n    if (firstCard && secondCard) {\n      setDisabled(true);\n      if (firstCard.emoji === secondCard.emoji) {\n        setCards(prev => prev.map(card =>\n          card.emoji === firstCard.emoji ? { ...card, isMatched: true } : card\n        ));\n        resetTurn();\n      } else {\n        setTimeout(() => {\n          setCards(prev => prev.map(card =>\n            card.id === firstCard.id || card.id === secondCard.id\n              ? { ...card, isFlipped: false }\n              : card\n          ));\n          resetTurn();\n        }, 1000);\n      }\n      setMoves(m => m + 1);\n    }\n  }, [firstCard, secondCard]);\n\n  const handleCardClick = (card) => {\n    if (!disabled && !card.isFlipped && !card.isMatched) {\n      setCards(prev => prev.map(c => c.id === card.id ? { ...c, isFlipped: true } : c));\n      if (!firstCard) {\n        setFirstCard(card);\n      } else {\n        setSecondCard(card);\n      }\n    }\n  };\n\n  const resetTurn = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n\n  const resetGame = () => {\n    setCards(shuffleArray(emojiList));\n    setMoves(0);\n    setFirstCard(null);\n    setSecondCard(null);\n    setDisabled(false);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-10 p-4 w-full\">\n      <h1 className=\"text-3xl font-bold mb-4\">🧠 Memory Match Game</h1>\n      <p className=\"mb-2\">Moves: {moves}</p>\n      <div className=\"flex justify-center w-full\">\n        <GameBoard cards={cards} onCardClick={handleCardClick} />\n      </div>\n      <button onClick={resetGame} className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\">\n        Reset Game\n      </button>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAG,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC;AAE3D,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,MAAMC,UAAU,GAAG,CAAC,GAAGD,KAAK,EAAE,GAAGA,KAAK,CAAC;EACvC,OAAOC,UAAU,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,MAAM;IACvEC,EAAE,EAAED,KAAK;IACTD,KAAK;IACLG,SAAS,EAAE,KAAK;IAChBC,SAAS,EAAE;EACb,CAAC,CAAC,CAAC;AACL;AAEA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC;EAErCC,SAAS,CAAC,MAAM;IACdoB,QAAQ,CAACf,YAAY,CAACD,SAAS,CAAC,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAENJ,SAAS,CAAC,MAAM;IACd,IAAIqB,SAAS,IAAIE,UAAU,EAAE;MAC3BG,WAAW,CAAC,IAAI,CAAC;MACjB,IAAIL,SAAS,CAACT,KAAK,KAAKW,UAAU,CAACX,KAAK,EAAE;QACxCQ,QAAQ,CAACS,IAAI,IAAIA,IAAI,CAAClB,GAAG,CAACmB,IAAI,IAC5BA,IAAI,CAAClB,KAAK,KAAKS,SAAS,CAACT,KAAK,GAAG;UAAE,GAAGkB,IAAI;UAAEd,SAAS,EAAE;QAAK,CAAC,GAAGc,IAClE,CAAC,CAAC;QACFC,SAAS,CAAC,CAAC;MACb,CAAC,MAAM;QACLC,UAAU,CAAC,MAAM;UACfZ,QAAQ,CAACS,IAAI,IAAIA,IAAI,CAAClB,GAAG,CAACmB,IAAI,IAC5BA,IAAI,CAAChB,EAAE,KAAKO,SAAS,CAACP,EAAE,IAAIgB,IAAI,CAAChB,EAAE,KAAKS,UAAU,CAACT,EAAE,GACjD;YAAE,GAAGgB,IAAI;YAAEf,SAAS,EAAE;UAAM,CAAC,GAC7Be,IACN,CAAC,CAAC;UACFC,SAAS,CAAC,CAAC;QACb,CAAC,EAAE,IAAI,CAAC;MACV;MACAH,QAAQ,CAACK,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACZ,SAAS,EAAEE,UAAU,CAAC,CAAC;EAE3B,MAAMW,eAAe,GAAIJ,IAAI,IAAK;IAChC,IAAI,CAACL,QAAQ,IAAI,CAACK,IAAI,CAACf,SAAS,IAAI,CAACe,IAAI,CAACd,SAAS,EAAE;MACnDI,QAAQ,CAACS,IAAI,IAAIA,IAAI,CAAClB,GAAG,CAACwB,CAAC,IAAIA,CAAC,CAACrB,EAAE,KAAKgB,IAAI,CAAChB,EAAE,GAAG;QAAE,GAAGqB,CAAC;QAAEpB,SAAS,EAAE;MAAK,CAAC,GAAGoB,CAAC,CAAC,CAAC;MACjF,IAAI,CAACd,SAAS,EAAE;QACdC,YAAY,CAACQ,IAAI,CAAC;MACpB,CAAC,MAAM;QACLN,aAAa,CAACM,IAAI,CAAC;MACrB;IACF;EACF,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtBT,YAAY,CAAC,IAAI,CAAC;IAClBE,aAAa,CAAC,IAAI,CAAC;IACnBE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACtBhB,QAAQ,CAACf,YAAY,CAACD,SAAS,CAAC,CAAC;IACjCwB,QAAQ,CAAC,CAAC,CAAC;IACXN,YAAY,CAAC,IAAI,CAAC;IAClBE,aAAa,CAAC,IAAI,CAAC;IACnBE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACEvB,OAAA;IAAKkC,SAAS,EAAC,8EAA8E;IAAAC,QAAA,gBAC3FnC,OAAA;MAAIkC,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjEvC,OAAA;MAAGkC,SAAS,EAAC,MAAM;MAAAC,QAAA,GAAC,SAAO,EAACX,KAAK;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtCvC,OAAA;MAAKkC,SAAS,EAAC,4BAA4B;MAAAC,QAAA,eACzCnC,OAAA,CAACF,SAAS;QAACkB,KAAK,EAAEA,KAAM;QAACwB,WAAW,EAAET;MAAgB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eACNvC,OAAA;MAAQyC,OAAO,EAAER,SAAU;MAACC,SAAS,EAAC,iEAAiE;MAAAC,QAAA,EAAC;IAExG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACxB,EAAA,CAtEuBD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}